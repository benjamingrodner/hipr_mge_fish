
# Snakefile
# =============================================================================
# Created By  : Ben Grodner
# Created Date: 2023_07_29
# Last edited : 
# =============================================================================
"""
This pipeline was written to classify barcodes for each pixel in 
spectral images for HiPRFISH 
"""
# =============================================================================
import pandas as pd
import os
import sys
import glob
import re

# =============================================================================
# Functions
# =============================================================================

def get_input_table(config):
    input_table = pd.read_csv(config['input_table_fn'])
    # input_table.columns = config['input_table_cols']
    return input_table

def expand_sn(string):
    return [string.format(sample_name=sn) for sn in SAMPLE_NAMES]

def expand_channels(string, seg_type):
    channels = config[seg_type]['channels']
    return [string.format(sample_name=sn, cell_chan=ch, spot_chan=ch) for ch in channels
            for sn in SAMPLE_NAMES]

def expand_las_not_sn(string):
    return [string.format(sample_name='{sample_name}', laser=las) 
            for las in LASERS]

def expand_all_channels(string):
    ch_cell = config['cell_seg']['channels']
    ch_spot = config['spot_seg']['channels']
    return [string.format(sample_name=sn, cell_chan=ch_c, spot_chan=ch_s)
            for ch_s in ch_spot
            for ch_c in ch_cell
            for sn in SAMPLE_NAMES]

def get_raw_filenames(wildcards):
    fmt = config['__default__']['DATA_DIR'] + '/{}' + config['laser_regex']
    return glob.glob(fmt.format(wildcards.sample_name))

def expand_sn_thresh_af(string):
    return [
        string.format(sample_name=sn, maskthresh=mt, allfluor=af)
        for sn, mt, af in zip(SAMPLE_NAMES, MASK_THRESHS, ALLFLUORS)
    ]


# =============================================================================
# Parameters
# =============================================================================

args = sys.argv
config_fn = args[args.index("--configfile") + 1]

input_table = get_input_table(config)
SAMPLE_NAMES = input_table['sample_name'].values
MASK_THRESHS = input_table['mask_thresh'].values
ALLFLUORS = input_table['allfluor'].values
ALLFLUORS = [re.sub('\.','_', str(f)) for f in ALLFLUORS]

LASERS = config['lasers']


# Rule all outputs
minmax_fns = expand_sn_thresh_af(config['output_dir'] + '/' + config['minmax_fmt'])
rgb_done_fns = expand_sn_thresh_af(config['output_dir'] + '/' + config['rgb_done_fmt'])
legend_fns = expand_sn_thresh_af(config['output_dir'] + '/' + config['legend_fmt'])


# =============================================================================
# Snake rules
# =============================================================================

rule all:
    input:
        rgb_done_fns,
        legend_fns
        


rule matrix_classify:
    input:
        expand_las_not_sn(config['data_dir'] + '/' + config['raw_fmt'])
    output:
        shift_dir = directory(config['output_dir'] + '/' + config['shift_dir']),
        mask_dir = directory(config['output_dir'] + '/' + config['mask_dir']),
        classif_dir = directory(config['output_dir'] + '/' + config['classif_dir']),
        spec_plot_dir = directory(config['output_dir'] + '/' + config['spec_plot_dir']),
        minmax_fn = config['output_dir'] + '/' + config['minmax_fmt']
    params:
        config_fn = config_fn,
        script = config['scripts_dir'] + '/' + config['mat_classif_script']
    shell:
        "python {params.script} "
        "-cfn {params.config_fn} "
        "-sn {wildcards.sample_name} "
        "-sd {output.shift_dir} "
        "-mt {wildcards.maskthresh} "
        "-md {output.mask_dir} "
        "-af {wildcards.allfluor} "
        "-cd {output.classif_dir} "
        "-mf {output.minmax_fn} "
        "-spd {output.spec_plot_dir} "
        

rule plot_rgb:
    input:
        shift_dir = config['output_dir'] + '/' + config['shift_dir'],
        minmax_fn = config['output_dir'] + '/' + config['minmax_fmt'],
        raw_fns = expand_las_not_sn(config['data_dir'] + '/' + config['raw_fmt'])
    output:
        rgb_dir = directory(config['output_dir'] + '/' + config['rgb_dir']),
        rgb_done_fn = config['output_dir'] + '/' + config['rgb_done_fmt']
    params:
        config_fn = config_fn,
        script = config['scripts_dir'] + '/' + config['plot_rgb_script']
    shell:
        "python {params.script} "
        "-cfn {params.config_fn} "
        "-sn {wildcards.sample_name} "
        "-sd {input.shift_dir} "
        "-mf {input.minmax_fn} "
        "-r {input.raw_fns} "
        "-rd {output.rgb_dir} "
        "-rdf {output.rgb_done_fn} "


rule plot_classif:
    input:
        shift_dir = config['output_dir'] + '/' + config['shift_dir'],
        classif_dir = config['output_dir'] + '/' + config['classif_dir'],
        minmax_fn = config['output_dir'] + '/' + config['minmax_fmt'],
        raw_fns = expand_las_not_sn(config['data_dir'] + '/' + config['raw_fmt'])
    output:
        classif_im_dir = directory(config['output_dir'] + '/' + config['classif_im_dir']),
        legend_fn = config['output_dir'] + '/' + config['legend_fmt']
    params:
        config_fn = config_fn,
        script = config['scripts_dir'] + '/' + config['plot_classif_script']
    shell:
        "python {params.script} "
        "-cfn {params.config_fn} "
        "-sn {wildcards.sample_name} "
        "-sd {input.shift_dir} "
        "-cd {input.classif_dir} "
        "-mf {input.minmax_fn} "
        "-r {input.raw_fns} "
        "-cid {output.classif_im_dir} "
        "-lf {output.legend_fn} "
