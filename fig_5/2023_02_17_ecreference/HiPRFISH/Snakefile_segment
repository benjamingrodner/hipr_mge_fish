# Snakefile
# =============================================================================
# Created By  : Ben Grodner
# Created Date: 2022_01_29
# Last edited : 2022_05_10
# =============================================================================
"""
This pipeline was written to segment spectral imgaes taken with 5bit HiPRFISH
encoding on oral plaque samples, then classify the cell spectra.
Last edited 12/23/22 BMG
"""
# =============================================================================
import pandas as pd
import os
import sys
import glob

# =============================================================================
# Functions
# =============================================================================

def get_input_table(config):
    input_table = pd.read_csv(config['images']['image_list_table'])
    # input_table.columns = config['input_table_cols']
    return input_table

def expand_sn(string):
    return [string.format(sample_name=sn) for sn in SAMPLE_NAMES]

def expand_channels(string, seg_type):
    channels = config[seg_type]['channels']
    return [string.format(sample_name=sn, cell_chan=ch, spot_chan=ch) for ch in channels
            for sn in SAMPLE_NAMES]

def expand_all_channels(string):
    ch_cell = config['cell_seg']['channels']
    ch_spot = config['spot_seg']['channels']
    return [string.format(sample_name=sn, cell_chan=ch_c, spot_chan=ch_s)
            for ch_s in ch_spot
            for ch_c in ch_cell
            for sn in SAMPLE_NAMES]

def get_raw_filenames(wildcards):
    fmt = config['__default__']['DATA_DIR'] + '/{}' + config['laser_regex']
    return glob.glob(fmt.format(wildcards.sample_name))


# =============================================================================
# Parameters
# =============================================================================

args = sys.argv
config_fn = args[args.index("--configfile") + 1]

input_table = get_input_table(config)
SAMPLE_NAMES = input_table['IMAGES'].values

csfn = config['cell_seg']['fn_mod']
# ssfn = config['spot_seg']['fn_mod']

probe_design_filename = (config['__default__']['PROBE_DESIGN_DIR'] +
                        '/' + config['probe_design_filename']
                        )
output_folder = config['reference_training']['out_dir']
spc = config['ref_train_simulations']
probe_design_basename = os.path.splitext(os.path.basename(probe_design_filename))[0]
svc_fn = config['pkl_fmt'].format(
        output_folder, str(spc), probe_design_basename,'svc'
        )


# Rule all outputs
seg_fns = expand_sn(config['output_dir'] + '/' + config['seg_fmt'])
seg_props_fns = expand_sn(config['output_dir'] + '/' + config['seg_props_fmt'])
classif_fns = expand_sn(config['output_dir'] + '/' + config['props_classif_fmt'])
seg_col_fns = expand_sn(config['output_dir'] + '/' + config['seg_col_fmt'])
props_filt_fns = expand_sn(config['output_dir'] + '/' + config['classif_filt_fmt'])
seg_filt_col_fns = expand_sn(config['output_dir'] + '/' + config['seg_filt_col_fmt'])
spec_cl_fns = expand_sn((config['output_dir']
        + '/' + config['plot_spec_classif_dir']
        + '/' + config['plot_spec_classif_complete_fmt']))
# print(get_raw_filenames)
# cell_seg_fns = expand_channels(config['output_dir'] + '/'
#                             + config['cell_seg_fmt'],
#                             'cell_seg')
# spot_seg_fns = expand_channels(config['output_dir'] + '/'
#                             + config['spot_seg_fmt'],
#                             'spot_seg')
# cell_seg_props_fns = expand_channels(config['output_dir'] + '/'
#                             + config['cell_props_fmt'],
#                             'cell_seg')
# cell_seg_spot_props_fns = expand_all_channels(config['output_dir']
#                             + '/cell_seg_props/{sample_name}/'
#                             +'{sample_name}_cellchan_{channel_cell}_spotchan_{channel_spot}'
#                             + csfn + '_props.csv')
# spot_seg_props_fns = expand_channels(config['output_dir'] + '/'
#                             + config['spot_props_fmt'],
#                             'spot_seg')
# spot_props_max_split_fns = expand_channels(config['output_dir'] + '/'
#                             + config['spot_props_max_split_fmt'],
#                             'spot_seg')
# spot_props_cid_fns = expand_all_channels(config['output_dir'] + '/'
#                             + config['spot_props_cid_fmt'])

# max_props_cid_fns = expand_wildcards(config['output_dir'] + '/spot_analysis/{sample_name}_chan_{channel}_max_props_cid.csv')

# =============================================================================
# Snake rules
# =============================================================================

rule all:
    input:
        seg_col_fns,
        spec_cl_fns,
        seg_filt_col_fns

# include: config['pipeline_path'] + '/rules/write_files_to_npy.smk'
include: config['pipeline_path'] + '/rules/train_classifier.smk'
include: config['pipeline_path'] + '/rules/hipr_prep_files.smk'
include: config['pipeline_path'] + '/rules/segment_hipr.smk'
include: config['pipeline_path'] + '/rules/get_cell_spectra.smk'
include: config['pipeline_path'] + '/rules/classify_spectra_5b.smk'
include: config['pipeline_path'] + '/rules/plot_classification_unfilt.smk'
include: config['pipeline_path'] + '/rules/filter_classification.smk'
include: config['pipeline_path'] + '/rules/plot_classification_filt.smk'
include: config['pipeline_path'] + '/rules/plot_classified_spectra.smk'

# include: 'rules/segment_spots.smk'
# include: 'rules/get_cell_seg_props.smk'
# include: config['pipeline_path'] + '/rules/get_cell_seg_spot_props_220608.smk'
# include: 'rules/get_spot_seg_props_220608.smk'
# include: config['pipeline_path'] + '/rules/assign_spots_to_cells_220608.smk'
# include: config['pipeline_path'] + '/rules/assign_spots_to_cells.smk'
# include: 'rules/split_multimax_spots.smk'
# include: 'rules/assign_spots_to_cells_220707.smk'
